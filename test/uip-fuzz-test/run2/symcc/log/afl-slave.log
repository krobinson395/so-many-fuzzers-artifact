run: /home/benchng/software/AFL/afl-fuzz -S afl-slave -i /home/benchng/software/contiki-ng-fuzzing/seeds/uip-min -o /home/benchng/shared/sync_folder -- /home/benchng/bin/ground-truth-harness.afl-clang @@
[0;36mafl-fuzz [1;97m2.56b[0m by <lcamtuf@google.com>
[1;92m[+] [0mDisabling the UI because AFL_NO_UI is set.[0m
[1;92m[+] [0mYou have 36 CPU cores and 2 runnable tasks (utilization: 6%).[0m
[1;92m[+] [0mTry parallel jobs - see docs/parallel_fuzzing.txt.[0m
[1;93m[!] [1;97mWARNING: [0mNot binding to a CPU core (AFL_NO_AFFINITY set).[0m
[1;94m[*] [0mChecking core_pattern...[0m
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mScanning '/home/benchng/software/contiki-ng-fuzzing/seeds/uip-min'...[0m
[1;92m[+] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mValidating target binary...[0m

[1;91m[-] [0mLooks like the target binary is not instrumented! The fuzzer depends on
    compile-time instrumentation to isolate interesting test cases while
    mutating the input data. For more information, and for tips on how to
    instrument binaries, please see docs/README.

    When source code is not available, you may be able to leverage QEMU
    mode support. Consult the README for tips on how to enable this.
    (It is also possible to use afl-fuzz as a traditional, "dumb" fuzzer.
    For that, you can use the -n option - but expect much worse results.)
)B[?25h[0m[1;91m
[-] PROGRAM ABORT : [1;97mNo instrumentation detected[1;91m
         Location : [0mcheck_binary(), afl-fuzz.c:6959

